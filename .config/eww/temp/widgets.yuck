(include "polls.yuck")

(defvar eww "eww")
(defvar full_charge false)
(defvar appmenu_reveal false)
(defvar paused true)
(defvar powerReveal false)
(defvar volumeReveal false)
(defvar vol_level 0)
(defvar mic_level 0)

(defwidget dateWidgets []
  (box
    :class "widgetList"
    :orientation "vertical"
    :valign "start"
    :space-evenly false
    :vexpand true
    
    (date)
    
    (calendar
      :class "calendar"
      :day "0"
      :month "0"
      :year "date +%Y"
      :show-details true
      :show-heading true
      :show-day-names true
      )
  )
)
(defwidget date []
  (box
    :class "date"
    :orientation "horizontal"
    :halign "center"
    (dayLabel)
    
  )
)

(defwidget dayLabel []
  (label
    :class "dayLabel"
    :text dayText)
)
(defpoll dayText
  :interval "5s"
  "date '+%B %e, %Y'")

(defwidget barWidgets []
  (centerbox
    :class "barWidgets"
    :orientation "horizontal"
    :valign "center"
    :halign "fill"
    :space-evenly true
    (barleft)
    (barcenter)
    (barright)
  )
)

(defwidget barleft []
  (box
    :class "barleft"
    :orientation "horizontal"
    :valign "center"
    :halign "start"
    :space-evenly false
    :spacing "5"
    (appmenu)
    (workspaces)

  )
)

(defwidget barcenter []
  (box
    :class "barcenter"
    :orientation "horizontal"
    :halign "center"
    :valign "center"
    :space-evenly false
    (clock)

  )
)

(defwidget barright []
  (box
    :class "barright"
    :orientation "horizontal"
    :valign "center"
    :halign "end"
    :space-evenly false
    :spacing "5"
    (changeTheme)
    (tray)
    (volumeWidget)
    (batteryWidget)
  )
)

(defwidget appmenu []
  (box
    :space-evenly false
      :class "appmenu"
    (eventbox
      :class "appmenuEventbox"
      :orientation "horizontal"
      :cursor "pointer"
      :onclick "$(wofi --show drun)"
      :onrightclick "${eww} update appmenu_reveal=true"
      :onhover "${eww} update appmenu_reveal=true"
      (label
          :class "appmenuLabel"
          :text "󰣇"
          :justify "center"
          :yalign "center"
          :xalign "center"
      )
    )
    (revealer
      :class "appmenuRevealer"
      :reveal appmenu_reveal
      :width "200px"
      :transition "slideright"
      (eventbox
        :cursor "pointer"
        :onclick "$(scripts/player.sh openWindow)"
        :onrightclick "$(playerctl pause)"
        :onhover "${eww} update appmenu_reveal=true"
        :onhoverlost "${eww} update appmenu_reveal=false"
        (playerInfo)
      )
    )
  )
)

(defwidget playerInfo []
  (box
    :class "playerInfo"
    :orientation "horizontal"
    :valign "center"
    :space-evenly false
   ; (image
   ;   :class "playerInfoImage"
   ;   :image-width: "10px"
   ;   :image-height: "10px"
   ;   :icon "󰝚"
   ;   :icon-size "20px"
   ; )
    (label
      :class "playerInfoLabel"
      :limit-width 10
      :justify "center"
      :text playerLabel
    )
  )
)
  

(defwidget workspaces []
  (literal
    :content workspace
  )
)

(defwidget clock []
  (eventbox
    :class "clock"
    :orientation "horizontal"
    :valign "center"
    :cursor "pointer"
    :onclick "scripts/toggleWindow.sh dateWindow"
    :show-truncated false
    (label
      :class "clockLabel"
      :justify "center"
      :text time
    )
  )
)

(defwidget changeTheme []
  (eventbox
    :class "changeTheme"
    :orientation "horizontal"
    :valign "center"
    :cursor "pointer"
    :onclick "$(scripts/swwwWallpaper.sh -i)"
    :onrightclick "$(scripts/swwwWallpaper.sh -r)"
    (label
      :class "changeThemeLabel"
      :text "󰏘"
    )
  )
)


(defwidget tray []
  (systray
    :class "tray"
    :orientation "horizontal"
    :space-evenly true
    :icon-size "21"
    :prepend-new true
  )
)

(defwidget volumeWidget []
  (box
    :class "volumeWidget"
    :orientation "horizontal"
    :space-evenly "false"
    :spacing 3
    (revealer
      :class "volumeReveal"
      :transition "slideleft"
      :reveal volumeReveal
      (eventbox
        :class "mixerButton"
        :orientation "horizontal"
        :cursor "pointer"
        :onclick "$(scripts/toggleWindow.sh volumeWindow)"
        :onhoverlost "eww update volumeReveal=false"
        :onrightclick "$(pavucontrol)"
        (label
          :class "mixerButtonLabel"
          :text "󰎆"
        )
      )
    )
    (eventbox
      :class "volume"
      :orientation "horizontal"
      :halign "center"
      :valign "center"
      :cursor "pointer"
      :onclick "$(pamixer --toggle-mute)"
      :onrightclick "eww update volumeReveal=${volumeReveal ? "false" : "true"}"
      :onscroll "$(scripts/volume.sh {})"
      (label
        :class "volumeLabel"
        :text "${volumeIcon} ${muted ? 'muted' : '${vol_level}%'}"
      )
    )
  )
)

(defwidget volumeControlWidgets []
  (box
    :class "volumeControlWidgets"
    :orientation "vertical"
    :halign "fill"
    :valign "fill"
    (scroller
      :class "volume"
      :text "󰕾"
      :value vol_level
      :onchange "pamixer --set-volume {} && eww update vol_level={}"
    )
    (scroller
      :class "mic"
      :text "󰍬"
      :value mic_level
      :onchange "pamixer --default-source --set-volume {} && eww update mic_level={}"
    ) 
  )
)

(defwidget playerWidgets []
  (box
    :class "playerWidgets"
    :orientation "vertical"
    :valign "start"
    :halign "fill"
    :vexpand false
    :space-evenly false
    (image
      :class "musicImage"
      :path playerImage
    )
    (playerControls)
    (scroller
      :class "player"
      :text ""
      :value playerPosition
      :onchange "$(scripts/player.sh changePos {})"
    )
  )
)

(defwidget playerControls []
  (box
    :class "playerControls"
    :orientation "horizontal"
    :halign "center"
    :space-evenly false
    :spacing "20"
    (button
      :class "playerButton"
      :cursor "pointer"
      :onclick "playerctl previous"
      (label
        :class "playerButtonLabel"
        :text "󰒮"
      )
    )
    (button
      :class "playerButton"
      :cursor "pointer"
      :onclick "scripts/player.sh pausePlay"
      (label
        :class "playerButtonLabel"
        :text {playerStatus == "Playing" ? "󰏤" : "󰐊"}
      )
    )
    (button
      :class "playerButton"
      :cursor "pointer"
      :onclick "playerctl next"
      (label
        :class "playerButtonLabel"
        :text "󰒭"
      )
    )
  )
)

(defwidget scroller [class text value onchange]
  (box
    :class "scroller ${class}Scroller"
    :orientation "horizontal"
    :space-evenly false
    (label
      :class "scrollerLabel ${text}ScrollLabel"
      :text text
    )
    (scale
      :class "${class}Scroll"
      :min 0
      :max 101
      :value value
      :hexpand true
      :round-digits 0
      :onchange onchange
      :orientation "horizontal"
    )
  )
)

(defwidget batteryWidget []
  (box
    :class "batteryWidget"
    :orientation "horizontal"
    :valign "center"
    :space-evenly false 
    :spacing 5
    :halign "end"
    (eventbox
      :class "battery"
      :orientation "horizontal"
      :cursor "pointer"
      :valign "center"
      :onrightclick "eww update powerReveal=${ powerReveal ? "false" : "true" }"
      (label
        :class "batteryLabel ${battery-status == 'Full' ? 'batfull' : '${battery-status == true ? 'batcharging' : '${battery-status == 'Low' ? 'bat_low' : '' }' }' }"
        :text "${battery} ${battery-capacity}%"
      )
    )
    (revealer
      :reveal powerReveal
      :class "powerReveal"
      :transition "slideright"
      (eventbox
        :onhoverlost "$(eww update powerReveal=false)"
        :class "powerRevealButton"
        :cursor "pointer"
        :onclick "scripts/toggleWindow.sh powerWindow"
        (label
          :class "powerRevealLabel"
          :text "󰐥"
        )
      )
    )
  )
)


(defwidget powerWidgets []
  (eventbox
    :class "powerWidgetOuter"
    :onclick "eww close powerWindow"
    (box
      :class "powerWidgets"
      :orientation "vertical"
      :halign "end"
      :valign "center"
      :height "400"
      :width "100"
      :space-evenly false
      :spacing 5
      (powerButton
        :class "shutdown"
        :text "󰐥"
        :function "$(shutdown now)"
      )
      (powerButton
        :class "restart"
        :text "󰜉"
        :function "$(systemctl reboot)"
      )
      (powerButton
        :class "sleep"
        :text "󰤄"
        :function "$(systemctl suspend)"
      )
      (powerButton
        :class "logout"
        :text "󰍃"
        :function "$(hyprctl dispatch exit)"
      )
    )
  )
)

(defwidget powerButton [class text function]
  (eventbox
    :class "powerButton ${class}"
    :orientation "horizontal"
    :height 100
    :cursor "pointer"
    :onclick function
    (label
      :class "powerButtonLabel ${class}Label"
      :text text
    )
  )
)
